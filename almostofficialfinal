#include <FastLED.h>
#include <Servo.h>

#define LED_PIN 10
#define NUM_LEDS 426

#define VEHICLE_SIZE 4

const int s0 = 2;
const int s1 = 3;
const int s2 = 4;
const int s3 = 5;

const int s0Pin = 6;
const int s1Pin = 7;
const int s2Pin = 8;
const int s3Pin = 9;
int sensorFlagValue;
int sensorNormalValue;
const int servoMotor1Channel = 2;
const int servoMotor2Channel = 9;
const int servoMotor3Channel = 10;
const int servoMotor4Channel = 11;
const int servoMotor5Channel = 12;
const int servoMotor6Channel = 13;
const int servoMotor7Channel = 14;
const int servoMotor8Channel = 15;

Servo servoMotor1;
Servo servoMotor2;
Servo servoMotor3;
Servo servoMotor4;
Servo servoMotor5;
Servo servoMotor6;
Servo servoMotor7;
Servo servoMotor8;
// Define the signal pin for the multiplexer
const int SIG_PIN = A1; // Connect this to the SIG pin of the multiplexer
const int estopChannel = 6;
const int keyChannel = 4;
const int enableChannel = 3;
const int resetChannel = 8;
const int dispatchChannel = 7;
const int stationChannel = 5;
const int powerLED = 11;

const int zone1beg = 3;
const int zone1end = 4;
const int zone2beg = 5;
const int zone2end = 6;
const int zone3beg = 7;
const int zone3end = 8;
const int zone4beg = 9;
const int zone4end = 10;
const int zone5beg = 11;
const int zone5end = 12;
const int zone6beg = 13;
const int zone6end = 14;
const int zone7beg = 15;
const int zone7end = 2;

bool zone1beginSensor = false;
bool zone1endSensor = false;
bool zone2beginSensor = false;
bool zone2endSensor = false;
bool zone3beginSensor = false;
bool zone3endSensor = false;
bool zone4beginSensor = false;
bool zone4endSensor = false;
bool zone5beginSensor = false;
bool zone5endSensor = false;
bool zone6beginSensor = false;
bool zone6endSensor = false;
bool zone7beginSensor = false;
bool zone7endSensor = false;

const int SIG_PIN_2 = A0;

CRGB leds[NUM_LEDS];
CRGB pattern1[VEHICLE_SIZE] = {CRGB::White, CRGB::Blue ,CRGB::Blue, CRGB::White}; 
CRGB pattern2[VEHICLE_SIZE] = {CRGB::White, CRGB::Red, CRGB::Red, CRGB::White};
CRGB pattern3[VEHICLE_SIZE] = {CRGB::White, CRGB::Green ,CRGB::Green, CRGB::White}; 
CRGB pattern4[VEHICLE_SIZE] = {CRGB::White, CRGB::Yellow, CRGB::Yellow, CRGB::White};
CRGB pattern5[VEHICLE_SIZE] = {CRGB::White, CRGB::Purple, CRGB::Purple, CRGB::White};

int pattern1Position = 5;
int pattern2Position = 410;
int pattern3Position = 317;
int pattern4Position = 283;
int pattern5Position = 169;

unsigned long lastUpdateTime = 0;
unsigned long updateInterval = 200; 


bool isStopped=false;
bool pattern1_isStopped=false;
bool estopCleared = true;
bool stationStopCleared = true;
bool pattern2_isStopped = false;
bool pattern3_isStopped = false;
bool pattern4_isStopped = false;
bool pattern5_isStopped = false;

struct Zone_Info {
    bool isOccupied;
    int zoneBegin;
    int zoneEnd;
};

Zone_Info zone1; 
Zone_Info zone2;
Zone_Info zone3;
Zone_Info zone4;
Zone_Info zone5;
Zone_Info zone6;
Zone_Info zone_station;

int channelFlag[16];
int channelNotFlag[16];


int SearchVehicle(int zoneBegin, int zoneEnd)
{
    if(pattern1Position>zoneBegin && pattern1Position<zoneEnd)
    {
      return 1;
    }
    else if(pattern2Position>zoneBegin && pattern2Position < zoneEnd)
    {
      return 2;
    }
    else if(pattern3Position>zoneBegin && pattern3Position < zoneEnd)
    {
      return 3;
    }
    else
    {
      return 0;
    }
}


void StopVehicle(int zoneBegin, int zoneEnd)
{
  int vehicle = SearchVehicle(zoneBegin, zoneEnd);

  if(vehicle==0)
  {
    return;
  }
  if(vehicle==1)
  {
    pattern1_isStopped=true;
  }
  if(vehicle==2)
  {
    pattern2_isStopped=true;
  }
  if(vehicle==3)
  {
    pattern3_isStopped=true;
  }
  
}

void MoveVehicle(int zoneBegin, int zoneEnd)
{
  int vehicle = SearchVehicle(zoneBegin, zoneEnd);
  if(vehicle==0)
  {
    return;
  }
  if(vehicle==1)
  {
    pattern1_isStopped=false;
  }
  if(vehicle==2)
  {
    pattern2_isStopped=false;
  }
  if(vehicle==3)
  {
    pattern3_isStopped=false;
  }
}

void stopAllVehicles()
{
  isStopped=true;
}

void moveAllVehicles()
{
  isStopped=false;
}

void turnOnPowerLED(){
  digitalWrite(powerLED,HIGH);
}

void initializeLEDS(){
  for (int channel = 0; channel < 16; channel++) {
    selectChannel(channel);
    channelNotFlag[channel] = analogRead(SIG_PIN_2);
  }

  fill_solid(leds, NUM_LEDS, CRGB::White);
  FastLED.show(); 
  delay(1500); 

  for (int channel = 0; channel < 16; channel++) {
    selectChannel(channel);
    channelFlag[channel]= analogRead(SIG_PIN_2);
  }
 
  fill_solid(leds, NUM_LEDS, CRGB::Black);
  FastLED.show();
}

// Function to select a channel on the multiplexer
void selectChannel(int channel) {
  // Calculate the binary representation of the channel
  digitalWrite(s0, bitRead(channel, 0));
  digitalWrite(s1, bitRead(channel, 1));
  digitalWrite(s2, bitRead(channel, 2));
  digitalWrite(s3, bitRead(channel, 3));

  digitalWrite(s0Pin, bitRead(channel, 0));
  digitalWrite(s1Pin, bitRead(channel, 1));    
  digitalWrite(s2Pin, bitRead(channel, 2));
  digitalWrite(s3Pin, bitRead(channel, 3));

}
void setup() {
  // Initialize the multiplexer control pins as OUTPUT
  pinMode(s0, OUTPUT);
  pinMode(s1, OUTPUT);
  pinMode(s2, OUTPUT);
  pinMode(s3, OUTPUT);
  
  pinMode(s0Pin, OUTPUT);
  pinMode(s1Pin, OUTPUT);
  pinMode(s2Pin, OUTPUT);
  pinMode(s3Pin, OUTPUT);

  // Initialize the signal pin as INPUT
  pinMode(SIG_PIN, INPUT_PULLUP);

  zone1.isOccupied=false;
  zone1.zoneBegin=0;
  zone1.zoneEnd=53;

  zone2.isOccupied=false;
  zone2.zoneBegin=54;
  zone2.zoneEnd=147;

  zone3.isOccupied=false;
  zone3.zoneBegin=148;
  zone3.zoneEnd=171;
  
  zone4.isOccupied=false;
  zone4.zoneBegin=171;
  zone4.zoneEnd=285;

  zone5.isOccupied=false;
  zone5.zoneBegin=286;
  zone5.zoneEnd=319;

  zone6.isOccupied=false;
  zone6.zoneBegin=320;
  zone6.zoneEnd=409;

  zone_station.isOccupied=false;
  zone_station.zoneBegin=410;
  zone_station.zoneEnd=427;

  FastLED.addLeds<WS2812B, LED_PIN, GRB>(leds, NUM_LEDS);
  FastLED.setBrightness(100);
    
  // Initialize serial communication for debugging
  Serial.begin(9600);
  initializeLEDS();
  FastLED.clear();

}

void loop() {
  // Loop through all 16 channels
  unsigned long currentTime = millis();
  int powerState = 0;
  int enableState = 1;

  if (currentTime - lastUpdateTime >= updateInterval) {
    FastLED.clear();

    for (int i = 0; i < VEHICLE_SIZE; i++) {
    leds[(pattern1Position + i) % NUM_LEDS] = pattern1[i];
    }

    for (int i = 0; i < VEHICLE_SIZE; i++) {
      leds[(pattern2Position + i) % NUM_LEDS] = pattern2[i];
    }
    for (int i = 0; i < VEHICLE_SIZE; i++) {
    leds[(pattern3Position + i) % NUM_LEDS] = pattern3[i];
    }
    FastLED.show();

    if(isStopped==false && pattern1_isStopped==false && estopCleared)
    {
      pattern1Position = (pattern1Position + 1) % NUM_LEDS;
    }
    else
    {
      if(!estopCleared && isStopped)
      {
        pattern1Position=pattern1Position;
      }
       else if(pattern1_isStopped && pattern1Position >=zone1.zoneBegin && pattern1Position<=46)
      {
        // let it keep moving
        pattern1Position = (pattern1Position + 1) % NUM_LEDS;
      }
      else if(pattern1_isStopped && pattern1Position >=zone2.zoneBegin && pattern1Position<=139)
      {
        // let it keep moving
        pattern1Position = (pattern1Position + 1) % NUM_LEDS;
      }
      else if(pattern1_isStopped && pattern1Position >=zone3.zoneBegin && pattern1Position<=164)
      {
        // let it keep moving
        pattern1Position = (pattern1Position + 1) % NUM_LEDS;
      }
      else if(pattern1_isStopped && pattern1Position == 165)
      {
        // stop on led 46
        pattern1Position=pattern1Position;
      }
 
      else if(pattern1_isStopped && pattern1Position == 47)
      {
        // stop on led 46
        pattern1Position=pattern1Position;
      }
      else if(pattern1_isStopped && pattern1Position == 140)
      {
        pattern1Position=pattern1Position;
      }
      else if(pattern1_isStopped && pattern1Position >=zone4.zoneBegin-3 && pattern1Position<=279)
      {
        // let it keep moving
        pattern1Position = (pattern1Position + 1) % NUM_LEDS;
      }
      else if(pattern1_isStopped && pattern1Position == 280)
      {
        // stop on led 46
        pattern1Position=pattern1Position;
      }
      else if(pattern1_isStopped && pattern1Position >=zone5.zoneBegin-3 && pattern1Position<=313)
      {
        // let it keep moving
        pattern1Position = (pattern1Position + 1) % NUM_LEDS;
      }
      else if(pattern1_isStopped && pattern1Position == 314)
      {
        // stop on led 46
        pattern1Position=pattern1Position;
      }
      else if(pattern1_isStopped && pattern1Position >=zone6.zoneBegin-3 && pattern1Position<=402)
      {
        // let it keep moving
        pattern1Position = (pattern1Position + 1) % NUM_LEDS;
      }
      else if(pattern1_isStopped && pattern1Position == 403)
      {
        // stop on led 46
        pattern1Position=pattern1Position;
      }


    }
      
    if(isStopped==false && pattern2_isStopped==false && estopCleared)
    {
      pattern2Position = (pattern2Position + 1) % NUM_LEDS;
    }
    else
    {
      if(!estopCleared && isStopped)
      {
        Serial.println("VEHICLE 2 A;LSDKFJASD;LKFJSDA;LKFJA;KJASD");
        pattern2Position=pattern2Position;
      }
      else if(pattern2_isStopped && pattern2Position >=zone1.zoneBegin && pattern2Position<=46)
      {
        // let it keep moving
        pattern2Position = (pattern2Position + 1) % NUM_LEDS;
      }
      else if(pattern2_isStopped && pattern2Position >=zone2.zoneBegin && pattern2Position<=139)
      {
        // let it keep moving
        pattern2Position = (pattern2Position + 1) % NUM_LEDS;
      }
 
      else if(pattern2_isStopped && pattern2Position == 47)
      {
        // stop on led 46
        pattern2Position=pattern2Position;
      }
      else if(pattern2_isStopped && pattern2Position == 140)
      {
        pattern2Position=pattern2Position;
      }
      else if(pattern2_isStopped && pattern2Position >=zone3.zoneBegin-3 && pattern2Position<=164)
      {
        // let it keep moving
        Serial.println("VEHICLE 2 IS IN ZONE 33333333 AND SHOULD BE MOVINGGGGGGGG!!!!!!!!");
        pattern2Position = (pattern2Position + 1) % NUM_LEDS;
      }
      else if(pattern2_isStopped && pattern2Position == 165)
      {
        // stop on led 46
        pattern2Position=pattern2Position;
      }
      else if(pattern2_isStopped && pattern2Position >=zone4.zoneBegin-3 && pattern2Position<=279)
      {
        // let it keep moving
        pattern2Position = (pattern2Position + 1) % NUM_LEDS;
      }
      else if(pattern2_isStopped && pattern2Position == 280)
      {
        // stop on led 46
        pattern2Position=pattern2Position;
      }
      else if(pattern2_isStopped && pattern2Position >=zone5.zoneBegin-3 && pattern2Position<=313)
      {
        // let it keep moving
        pattern2Position = (pattern2Position + 1) % NUM_LEDS;
      }
      else if(pattern2_isStopped && pattern2Position == 314)
      {
        // stop on led 46
        pattern2Position=pattern2Position;
      }
      else if(pattern2_isStopped && pattern2Position >=zone6.zoneBegin-3 && pattern2Position<=402)
      {
        // let it keep moving
        pattern2Position = (pattern2Position + 1) % NUM_LEDS;
      }
      else if(pattern2_isStopped && pattern2Position == 403)
      {
        // stop on led 46
        pattern2Position=pattern2Position;
      }
      
    }

    if(isStopped==false && pattern3_isStopped==false && estopCleared)
    {
      pattern3Position = (pattern3Position + 1) % NUM_LEDS;
    }
    else
    {
      if(!estopCleared && isStopped)
      {
        pattern1Position=pattern1Position;
      }
      else if(pattern3_isStopped && pattern3Position >=zone1.zoneBegin && pattern3Position<=46)
      {
        // let it keep moving
        pattern3Position = (pattern3Position + 1) % NUM_LEDS;
      }
      else if(pattern3_isStopped && pattern3Position >=zone2.zoneBegin && pattern3Position<=139)
      {
        // let it keep moving
        pattern3Position = (pattern3Position + 1) % NUM_LEDS;
      }
 
      else if(pattern3_isStopped && pattern3Position == 47)
      {
        // stop on led 46
        pattern3Position=pattern3Position;
      }
      else if(pattern3_isStopped && pattern3Position == 140)
      {
        pattern3Position=pattern3Position;
      }
      else if(pattern3_isStopped && pattern3Position >=zone3.zoneBegin-3 && pattern3Position<=164)
      {
        // let it keep moving
        pattern3Position = (pattern3Position + 1) % NUM_LEDS;
      }
      else if(pattern3_isStopped && pattern3Position == 165)
      {
        // stop on led 46
        pattern3Position=pattern3Position;
      }
      else if(pattern3_isStopped && pattern3Position >=zone4.zoneBegin-3 && pattern3Position<=279)
      {
        // let it keep moving
        pattern3Position = (pattern3Position + 1) % NUM_LEDS;
      }
      else if(pattern3_isStopped && pattern3Position == 280)
      {
        // stop on led 46
        pattern3Position=pattern3Position;
      }
      else if(pattern3_isStopped && pattern3Position >=zone5.zoneBegin-3 && pattern3Position<=313)
      {
        // let it keep moving
        pattern3Position = (pattern3Position + 1) % NUM_LEDS;
      }
      else if(pattern3_isStopped && pattern3Position == 314)
      {
        // stop on led 46
        pattern3Position=pattern3Position;
      }
      else if(pattern3_isStopped && pattern3Position >=zone6.zoneBegin-3 && pattern3Position<=402)
      {
        // let it keep moving
        pattern3Position = (pattern3Position + 1) % NUM_LEDS;
      }
      else if(pattern3_isStopped && pattern3Position == 403)
      {
        // stop on led 46
        pattern3Position=pattern3Position;
      }
    }
   
  lastUpdateTime = currentTime;

  for (int channel = 0; channel < 16; channel++) {
    // Select the current channel on the multiplexer
    selectChannel(channel);

    // Read the button state from the current channel
    int buttonState = digitalRead(SIG_PIN);
    int sensorValue = analogRead(SIG_PIN_2);
  
    if(sensorValue>channelNotFlag[channel] && sensorValue>=channelFlag[channel])
    {
      // Serial.print("Channel ");
      // Serial.print(channel);
      // Serial.print(": ");
      // Serial.print(sensorValue);
      // Serial.print(" normal value is ");
      // Serial.println(channelNotFlag[channel]);
      if(channel == zone1end)
      {
        zone1.isOccupied = false;
        zone2.isOccupied = true;
        Serial.println("Zone 2 is BUSYYYYYYYYY");
      }

      if(channel == zone1beg)
      {
        zone1.isOccupied=true;
        if(zone2.isOccupied){
          Serial.println("VEHICLE 2 SHOULD STOPPPPPPPPPPPPPPP");
          StopVehicle(zone1.zoneBegin, zone1.zoneEnd);
        }else
        {
          MoveVehicle(zone1.zoneBegin, zone1.zoneEnd);
        }
      }

      if(channel == zone2end)
      {
        Serial.println("ZONE 2 IS FREEEEEEEEEEE");
        Serial.println("Moving Vehicle in zone 1 !!_!_!_!_!_!__");
        zone2.isOccupied = false;
        zone3.isOccupied = true;
        MoveVehicle(zone1.zoneBegin, zone1.zoneEnd);
      }

      if(channel == zone2beg)
      {
        zone2.isOccupied=true;
        if(zone3.isOccupied){
          StopVehicle(zone2.zoneBegin, zone2.zoneEnd);
         
        }else
        {
          MoveVehicle(zone2.zoneBegin, zone2.zoneEnd);
      
        }
      }

    if(channel == zone3end)
      {
        zone3.isOccupied = false;
        zone4.isOccupied = true;
        MoveVehicle(zone2.zoneBegin, zone2.zoneEnd);
      }

      if(channel == zone3beg)
      {
        zone3.isOccupied=true;
        if(zone4.isOccupied){
          StopVehicle(zone3.zoneBegin-3, zone3.zoneEnd-3);
        }else
        {
          MoveVehicle(zone3.zoneBegin-3, zone3.zoneEnd-3);
        }
      }

      if(channel == zone4end)
      {
        zone4.isOccupied = false;
        zone5.isOccupied = true;
        MoveVehicle(zone3.zoneBegin, zone3.zoneEnd);
      }

      if(channel == zone4beg)
      {
        zone4.isOccupied=true;
        if(zone5.isOccupied){
          StopVehicle(zone4.zoneBegin, zone4.zoneEnd);
        }else
        {
          MoveVehicle(zone4.zoneBegin, zone4.zoneEnd);
        }
      }

      if(channel == zone5end)
      {
        zone5.isOccupied = false;
        zone6.isOccupied = true;
        Serial.println("Vehicle is zone 4 SHOULD MOVEEEEEEE");
        MoveVehicle(zone4.zoneBegin, zone4.zoneEnd);
      }

      if(channel == zone5beg)
      {
        zone5.isOccupied=true;
        if(zone6.isOccupied){
          StopVehicle(zone5.zoneBegin, zone5.zoneEnd);
        }else
        {
          MoveVehicle(zone5.zoneBegin, zone5.zoneEnd);
        }
      }

      if(channel == zone6end)
      {
        zone6.isOccupied = false;
        zone_station.isOccupied = true;
        MoveVehicle(zone5.zoneBegin, zone5.zoneEnd);
      }

      if(channel == zone6beg)
      {
        zone6.isOccupied=true;
        if(zone_station.isOccupied){
          StopVehicle(zone6.zoneBegin, zone6.zoneEnd);
        }else
        {
          MoveVehicle(zone6.zoneBegin, zone6.zoneEnd);
        }
      }

      if(channel == zone7end) 
      {
        zone_station.isOccupied = false;
        zone1.isOccupied = true;
        MoveVehicle(zone6.zoneBegin, zone6.zoneEnd);
        Serial.print("station cleared");
      }

      if(channel == zone7beg)
      {
        zone_station.isOccupied=true;
        if(zone1.isOccupied){
          StopVehicle(zone_station.zoneBegin, zone_station.zoneEnd);
        }else
        {
          MoveVehicle(zone_station.zoneBegin, zone_station.zoneEnd);
        }
      }

             

    }
    else
    {
      if(channel == zone1beg)
      {
        zone1beginSensor=false;
      }
      if(channel == zone1end)
      {
        zone1endSensor=false;
      }
      if(channel == zone2beg)
      {
        zone2beginSensor=false;
      }
      if(channel == zone2end)
      {
        zone2endSensor=false;
      }
      if(channel == zone3beg)
      {
        zone3beginSensor=false;
      }
      if(channel == zone3end)
      {
        zone3endSensor=false;
      }
      if(channel == zone4beg)
      {
        zone4beginSensor=false;
      }
      if(channel == zone4end)
      {
        zone4endSensor=false;
      }
      if(channel == zone5beg)
      {
        zone5beginSensor=false;
      }
      if(channel == zone5end)
      {
        zone5endSensor=false;
      }
      if(channel == zone6beg)
      {
        zone6beginSensor=false;
      }
      if(channel == zone6end)
      {
        zone6endSensor=false;
      }
      if(channel == zone7beg)
      {
        zone7beginSensor = false;
      }
      if(channel == zone7endSensor)
      {
        zone7endSensor = false;
      }
    }


    if(buttonState == HIGH)
    {
      if(channel == keyChannel){
        turnOnPowerLED();
        powerState = 1;
      }
      
      if(powerState == 1){

        if(channel == estopChannel){
          estopCleared = false;
          stopAllVehicles();
    
        }
        
        if(channel == enableChannel){
          enableState = 1;
        }

        if(channel == dispatchChannel && enableState == 1 && estopCleared){
          Serial.println("dispatch pressed");
          moveAllVehicles();
        }

        if(channel == dispatchChannel && enableState == 1 && stationStopCleared){
          MoveVehicle(zone_station.zoneBegin,zone_station.zoneEnd);
        }
        
        if(channel == resetChannel && enableState == 1){
      
          estopCleared = true;
          stationStopCleared = true;
        }

        if(channel == stationChannel){
          StopVehicle(zone_station.zoneBegin, zone_station.zoneEnd);
          stationStopCleared = false;
        }
      }

    }

    delay(10);
  }

  if(powerState == 0){
    digitalWrite(powerLED, LOW);
    stopAllVehicles();
  }
  }

}
